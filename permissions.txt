== site-level capabilities ==
pm_role
pm_tag
pm_site_permission
pm_object_permission # this sounds too much like permissions on an object, while what it contains really is the master list of all possible permissions that can be assigned to an object.
pm_role_permission

== object level permissions ==
adminstrate_url
edit_url_entries
edit_handlers
edit_handler_configs
edit_single_handler
edit_single_handler_config

plugin tags, roles, site-level permissions and object-level permissions are -NOT- stored in the database. Instead each plugin will provide their own list which is then stored in memory and is used to generate the permissions list in the user management dashboard.

/
administrate_url
edit_url_entries
edit_handler
edit_child_handler_params
edit_handler
edit_handler_params

-- managed by admin
CREATE TABLE pm_user_role (
    site_id UUID
    ,plugin TEXT
    ,user_id UUID
    ,role TEXT
);

-- managed by superadmin
CREATE TABLE pm_tag_role_permission (
    site_id UUID
    ,plugin TEXT
    ,tag TEXT
    ,role TEXT
    ,permission TEXT
);

-- managed by superadmin
CREATE TABLE pm_tag_role_owner (
    site_id UUID
    ,plugin TEXT
    ,tag TEXT
    ,role TEXT
);

-- managed by url creator
-- plugin is always the empty string ''
CREATE TABLE pm_url_role_permission (
    site_id UUID
    ,url TEXT
    ,role TEXT
    ,permission TEXT
);

-- managed by url creator
-- plugin is always the empty string ''
CREATE TABLE pm_url_tag (
    site_id UUID
    ,url TEXT
    ,tag TEXT
);

== URL Dashboard ==
capability: read URLs for a given prefix
capability: write URLs for a given prefix
how to store prefix permissions?
what about the capability where you can edit the contents of a URL but you cannot edit the URL itself?
what about the capability to edit the handler args but you cannot change the handler itself?

owner -> edit URL -> edit handler -> edit handler params -> read

there is a use case for Tailscale's RBAC system here: owners of a prefix may not want to delegate subprefixes to inidividuals one by one. Instead, it would be nice if they could delegate a subprefix to a role instead. Or they may tag the URL prefix (or URL?) with an object tag and the policymaker may decide which roles have what access (owner, edit URL, edit handler, edit handler params) to those object tags.
    you can delegate a capability on an object by user, role or object tag

users have roles
admins assign roles
superadmins map roles/users to tags with a permission level 1-5
superadmins define tag owners

A plugin is a collection of handlers
A theme is a collection of templates

by default you are the owner of the prefix '/'. what can you do as the owner of prefix '/'?

if you have write access to a prefix, you may add any number of sub URLs on it

== Multi-user blog ==
- can create new post
- can edit existing post
    - how do existing blogging engines handle per-post permissions?
superadmins can assign admin capabilities to users
admins can assign non-admin capabilities to users
users have full read write control over their posts
admins have full read write control over all posts

all edits are tracked, but only after I figure out how to store file revisions
as diffs and patch diffs iteratively to reach any arbitrary past state.

== Forum ===

== Wiki ==

== LMS ==

== Ecommerce ==

== Group submission portal ==

methods plugins need:
- setup (for migration)
- plugin name, url and version
    - on server startup:
        - check if url and version already exist (if exist, return)
        - check if name exist (if exist, append random hash to name)
        - insert name, url, version
    - superadmin of primary site is free to change the plugin name anytime, plugin will not interfere
- list of handlers
    - on server startup:
        - insert handler names into db (on conflict do nothing)
        - use SELECT and url+version in order to get the plugin name programatically
    - register the plugin handlers under the plugin name (use SELECT with url+version)
- list of capabilities
    - on server startup:
        - insert capabilities into db (on conflict do nothing)
        - use SELECT and url+version in order to get the plugin name programatically
- list of roles+capabilities
    - on server startup:
        - insert roles+capabilities into db (on conflict do nothing)
        - use SELECT and url+version in order to get the plugin name programatically
- list of middlewares
    - this is how plugins like pagemanager/template are able to register the /pm-template endpoint without needing the user to do it

plugins are free to add handlers/capabilities/roles without breaking version compatibility, as long as existing handlers/capabilities/roles are not affected (API is append-only).

if a capability contains a '.' it will be excluded as a site-level capability
this means that all site-level capabilities can only use dashes e.g. administrate-roles
this encourages plugins to prefix object-level capabilities with the object name followed by a dot e.g. url.administrate

type Plugin interface{
    DefaultName() string
    URL() string
    HandlerNames() []string
    Handler(name string, config []byte) http.Handler

    Version() string            // optional, default to ""
    Capabilities() []string     // optional, default to nil
    Roles() map[string][]string // optional, default to nil
    Setup(cfg *Config) error    // optional, if you need to database setup at all you can get by without this
    Middleware(next http.Handler) http.Handler // optional, if you no need middleware just return next as-is
}

type Pagemanager struct {
    /* ... */
    middleware func(http.Handler) http.Handler
    plugins []Plugin
    pluginIndexes map[[2]string]int
}
*Config to take in an additional slice of plugins so that you actually have full control over what plugins are loaded into *Pagemanager.
    the global plugins slice is still always loaded, but whatever's in the config will overwrite plugins of the same URL+version
    meaning you can only ever add or replace plugins in a pagemanager struct, you cannot remove them
    this all works out because the moment you import a plugin for its plugin.New() function, you will register a default plugin into the global plugins slice. But if you pass in a user-configured version of the plugin again into *Config, it will replace the deafult version of the plugin. All ok, works beautifully

pagemanager *Config takes in an additional 'DatabaseSchema' argument that allows *Pagemanager and plugins to parameterise their tables by a database schema

sq.New[USERS]()
sq.NewAlias[USERS]("a")
sq.NewAliasSchema[USERS]("a", srv.DBSchema)
sq.NewInfo[USERS](func(info *TableInfo) { info.TableAlias = alias })
sq.NewInfo[USERS](func(info *TableInfo) {
    info.TableAlias = alias
    info.TableSchema = srv.DBSchema
})
